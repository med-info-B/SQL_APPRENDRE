/* Generated By:JavaCC: Do not edit this line. ParserSQL.java */
package apprendreSQL.Model.analysisType.syntax;

import java.util.List;

import apprendreSQL.Model.analysisType.lexical.JavaCharStream;
import apprendreSQL.Model.analysisType.lexical.ParserSQLTokenManager;
import apprendreSQL.Model.analysisType.lexical.Token;
import apprendreSQL.Model.analysisType.semantic.Observers;

import java.util.ArrayList;



public  class ParserSQL implements ParserSQLConstants {

	
	
	private List<Observers> observers = new ArrayList<Observers>();
	private String observerString;
	private String indice;
	
	public void setIndice(String s)
	{
		indice = s;
	}
	
	
	public void registerObserver(Observers o)
	{
		observers.add(o);
	}
	
	public void removeObserver(Observers o )
	{
		observers.remove(o);
	}
	private void notifyEvent(String token)
	{
		for(Observers o : observers)
			o.notifyEventEleve(token);
	}
/* Grammar */
  final public void sqlStmtList() throws ParseException {
    sqlStmt();
    jj_consume_token(SEMICOLON);
  }

  final public void sqlStmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPLAIN:
      jj_consume_token(EXPLAIN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUERY:
        jj_consume_token(QUERY);
        jj_consume_token(PLAN);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALTER:
      alterTableStmt();
      break;
    case ANALYZE:
      analyzeStmt();
      break;
    case ATTACH:
      attachStmt();
      break;
    case BEGIN:
      beginStmt();
      break;
    case COMMIT:
    case END:
      commitStmt();
      break;
    default:
      jj_la1[2] = jj_gen;
      if (jj_2_1(2)) {
        createIndexStmt();
      } else if (jj_2_2(2)) {
        createTableStmt();
      } else if (jj_2_3(2)) {
        createTriggerStmt();
      } else if (jj_2_4(2)) {
        createViewStmt();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CREATE:
          createVirtualTableStmt();
          break;
        case DELETE:
          deleteStmt();
          break;
        case DETACH:
          detachStmt();
          break;
        default:
          jj_la1[3] = jj_gen;
          if (jj_2_5(2)) {
            dropIndexStmt();
          } else if (jj_2_6(2)) {
            dropTableStmt();
          } else if (jj_2_7(2)) {
            dropTriggerStmt();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DROP:
              dropViewStmt();
              break;
            case INSERT:
            case REPLACE:
              insertStmt();
              break;
            case PRAGMA:
              pragmaStmt();
              break;
            case REINDEX:
              reindexStmt();
              break;
            case RELEASE:
              releaseStmt();
              break;
            case ROLLBACK:
              rollbackStmt();
              break;
            case SAVEPOINT:
              savepointStmt();
              break;
            case SELECT:
              selectStmt();
              break;
            case UPDATE:
              updateStmt();
              break;
            case VACUUM:
              vacuumStmt();
              break;
            default:
              jj_la1[4] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void name() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void alterTableStmt() throws ParseException {
    jj_consume_token(ALTER);
    jj_consume_token(TABLE);
    if (jj_2_8(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RENAME:
      renameTableStmt();
      break;
    case ADD:
      addColumnStmt();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void renameTableStmt() throws ParseException {
    jj_consume_token(RENAME);
    jj_consume_token(TO);
    name();
  }

  final public void addColumnStmt() throws ParseException {
    jj_consume_token(ADD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLUMN:
      jj_consume_token(COLUMN);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    columnDef();
  }

  final public void analyzeStmt() throws ParseException {
    jj_consume_token(ANALYZE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ID:
      name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        name();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  final public void attachStmt() throws ParseException {
    jj_consume_token(ATTACH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATABASE:
      jj_consume_token(DATABASE);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    expr();
    jj_consume_token(AS);
    name();
  }

  final public void beginStmt() throws ParseException {
    jj_consume_token(BEGIN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFERRED:
    case EXCLUSIVE:
    case IMMEDIATE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFERRED:
        jj_consume_token(DEFERRED);
        break;
      case IMMEDIATE:
        jj_consume_token(IMMEDIATE);
        break;
      case EXCLUSIVE:
        jj_consume_token(EXCLUSIVE);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANSACTION:
      jj_consume_token(TRANSACTION);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  final public void commitStmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMIT:
      jj_consume_token(COMMIT);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANSACTION:
      jj_consume_token(TRANSACTION);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  final public void rollbackStmt() throws ParseException {
    jj_consume_token(ROLLBACK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANSACTION:
      jj_consume_token(TRANSACTION);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TO:
      jj_consume_token(TO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SAVEPOINT:
        jj_consume_token(SAVEPOINT);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      name();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  final public void savepointStmt() throws ParseException {
    jj_consume_token(SAVEPOINT);
    name();
  }

  final public void releaseStmt() throws ParseException {
    jj_consume_token(RELEASE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SAVEPOINT:
      jj_consume_token(SAVEPOINT);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    name();
  }

  final public void createIndexStmt() throws ParseException {
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIQUE:
      jj_consume_token(UNIQUE);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(INDEX);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(NOT);
      jj_consume_token(EXISTS);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    if (jj_2_9(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
    jj_consume_token(ON);
    name();
    jj_consume_token(LP);
    indexedColumn();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      indexedColumn();
    }
    jj_consume_token(RP);
  }

  final public void indexedColumn() throws ParseException {
    name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLLATE:
      jj_consume_token(COLLATE);
      name();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        jj_consume_token(ASC);
        break;
      case DESC:
        jj_consume_token(DESC);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  final public void createTableStmt() throws ParseException {
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEMP:
    case TEMPORARY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEMP:
        jj_consume_token(TEMP);
        break;
      case TEMPORARY:
        jj_consume_token(TEMPORARY);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(TABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(NOT);
      jj_consume_token(EXISTS);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    if (jj_2_10(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      createTableStmtWithColumns();
      break;
    case AS:
      createTableStmtWithSelect();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void createTableStmtWithColumns() throws ParseException {
    jj_consume_token(LP);
    columnDef();
    label_2:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      columnDef();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      tableConstraint();
    }
    jj_consume_token(RP);
  }

  final public void createTableStmtWithSelect() throws ParseException {
    jj_consume_token(AS);
    selectStmt();
  }

  final public void columnDef() throws ParseException {
    name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ID:
      typeName();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHECK:
      case COLLATE:
      case CONSTRAINT:
      case DEFAULT_:
      case NOT:
      case PRIMARY:
      case REFERENCES:
      case UNIQUE:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_4;
      }
      columnConstraint();
    }
  }

  final public void typeName() throws ParseException {
    name();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case ID:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_5;
      }
      name();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
      signedNumber();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        signedNumber();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(RP);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
  }

  final public void columnConstraint() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRAINT:
      jj_consume_token(CONSTRAINT);
      name();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARY:
      primaryKeyColumnConstraint();
      break;
    case NOT:
      notNullColumnConstraint();
      break;
    case UNIQUE:
      uniqueColumnConstraint();
      break;
    case CHECK:
      checkColumnConstraint();
      break;
    case DEFAULT_:
      defaultColumnConstraint();
      break;
    case COLLATE:
      collateColumnConstraint();
      break;
    case REFERENCES:
      foreignKeyColumnConstraint();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void primaryKeyColumnConstraint() throws ParseException {
    jj_consume_token(PRIMARY);
    jj_consume_token(KEY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        jj_consume_token(ASC);
        break;
      case DESC:
        jj_consume_token(DESC);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    conflictClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUTOINCREMENT:
      jj_consume_token(AUTOINCREMENT);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
  }

  final public void notNullColumnConstraint() throws ParseException {
    jj_consume_token(NOT);
    jj_consume_token(NULL);
    conflictClause();
  }

  final public void uniqueColumnConstraint() throws ParseException {
    jj_consume_token(UNIQUE);
    conflictClause();
  }

  final public void checkColumnConstraint() throws ParseException {
    jj_consume_token(CHECK);
    jj_consume_token(LP);
    expr();
    jj_consume_token(RP);
  }

  final public void defaultColumnConstraint() throws ParseException {
    jj_consume_token(DEFAULT_);
    if (jj_2_12(2147483647)) {
      signedNumber();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case NULL:
      case NUMERIC:
      case STRING:
      case BLOB:
        literalValue();
        break;
      case LP:
        jj_consume_token(LP);
        expr();
        jj_consume_token(RP);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void collateColumnConstraint() throws ParseException {
    jj_consume_token(COLLATE);
    name();
  }

  final public void foreignKeyColumnConstraint() throws ParseException {
    foreignKeyClause();
  }

  final public void signedNumber() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    numericLiteral();
  }

  final public void tableConstraint() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRAINT:
      jj_consume_token(CONSTRAINT);
      name();
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARY:
      primaryKeyTableConstraint();
      break;
    case CHECK:
      checkTableConstraint();
      break;
    case FOREIGN:
      foreignKeyTableConstraint();
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void primaryKeyTableConstraint() throws ParseException {
    jj_consume_token(PRIMARY);
    jj_consume_token(KEY);
    jj_consume_token(LP);
    indexedColumn();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      indexedColumn();
    }
    jj_consume_token(RP);
    conflictClause();
  }

  final public void uniqueTableConstraint() throws ParseException {
    jj_consume_token(UNIQUE);
    jj_consume_token(LP);
    indexedColumn();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      indexedColumn();
    }
    jj_consume_token(RP);
    conflictClause();
  }

  final public void checkTableConstraint() throws ParseException {
    jj_consume_token(CHECK);
    jj_consume_token(LP);
    expr();
    jj_consume_token(RP);
  }

  final public void foreignKeyTableConstraint() throws ParseException {
    jj_consume_token(FOREIGN);
    jj_consume_token(KEY);
    jj_consume_token(LP);
    name();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      name();
    }
    jj_consume_token(RP);
    foreignKeyClause();
  }

  final public void foreignKeyClause() throws ParseException {
    jj_consume_token(REFERENCES);
    name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
      name();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        name();
      }
      jj_consume_token(RP);
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MATCH:
      case ON:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ON:
        onSetting();
        break;
      case MATCH:
        matchSetting();
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_13(2)) {
      deferrableSetting();
    } else {
      ;
    }
  }

  final public void onSetting() throws ParseException {
    jj_consume_token(ON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
      jj_consume_token(DELETE);
      break;
    case UPDATE:
      jj_consume_token(UPDATE);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SET:
      jj_consume_token(SET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
        jj_consume_token(NULL);
        break;
      case DEFAULT_:
        jj_consume_token(DEFAULT_);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CASCADE:
      jj_consume_token(CASCADE);
      break;
    case RESTRICT:
      jj_consume_token(RESTRICT);
      break;
    case NO:
      jj_consume_token(NO);
      jj_consume_token(ACTION);
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void matchSetting() throws ParseException {
    jj_consume_token(MATCH);
    name();
  }

  final public void deferrableSetting() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(DEFERRABLE);
      break;
    case DEFERRABLE:
      jj_consume_token(DEFERRABLE);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INITIALLY:
      jj_consume_token(INITIALLY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFERRED:
        jj_consume_token(DEFERRED);
        break;
      case IMMEDIATE:
        jj_consume_token(IMMEDIATE);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
  }

  final public void conflictClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ON:
      jj_consume_token(ON);
      jj_consume_token(CONFLICT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROLLBACK:
        jj_consume_token(ROLLBACK);
        break;
      case ABORT:
        jj_consume_token(ABORT);
        break;
      case FAIL:
        jj_consume_token(FAIL);
        break;
      case IGNORE:
        jj_consume_token(IGNORE);
        break;
      case REPLACE:
        jj_consume_token(REPLACE);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
  }

  final public void createTriggerStmt() throws ParseException {
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEMP:
    case TEMPORARY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEMP:
        jj_consume_token(TEMP);
        break;
      case TEMPORARY:
        jj_consume_token(TEMPORARY);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    jj_consume_token(TRIGGER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(NOT);
      jj_consume_token(EXISTS);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    if (jj_2_14(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AFTER:
    case BEFORE:
    case INSTEAD:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEFORE:
        jj_consume_token(BEFORE);
        break;
      case AFTER:
        jj_consume_token(AFTER);
        break;
      case INSTEAD:
        jj_consume_token(INSTEAD);
        jj_consume_token(OF);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
      jj_consume_token(DELETE);
      break;
    case INSERT:
      jj_consume_token(INSERT);
      break;
    case UPDATE:
      jj_consume_token(UPDATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OF:
        jj_consume_token(OF);
        name();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[66] = jj_gen;
            break label_11;
          }
          jj_consume_token(COMMA);
          name();
        }
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ON);
    name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(EACH);
      jj_consume_token(ROW);
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHEN:
      jj_consume_token(WHEN);
      expr();
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    jj_consume_token(BEGIN);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UPDATE:
        updateStmt();
        break;
      case INSERT:
      case REPLACE:
        insertStmt();
        break;
      case DELETE:
        deleteStmt();
        break;
      case SELECT:
        selectStmt();
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case INSERT:
      case REPLACE:
      case SELECT:
      case UPDATE:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_12;
      }
    }
    jj_consume_token(END);
  }

  final public void createViewStmt() throws ParseException {
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEMP:
    case TEMPORARY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEMP:
        jj_consume_token(TEMP);
        break;
      case TEMPORARY:
        jj_consume_token(TEMPORARY);
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    jj_consume_token(VIEW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(NOT);
      jj_consume_token(EXISTS);
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
    if (jj_2_15(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
    jj_consume_token(AS);
    selectStmt();
  }

  final public void createVirtualTableStmt() throws ParseException {
    jj_consume_token(CREATE);
    jj_consume_token(VIRTUAL);
    jj_consume_token(TABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(NOT);
      jj_consume_token(EXISTS);
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    if (jj_2_16(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
    jj_consume_token(USING);
    name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
      moduleArgument();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[77] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        moduleArgument();
      }
      jj_consume_token(RP);
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
  }

  final public void moduleArgument() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
      other();
      jj_consume_token(RP);
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
  }

  final public void other() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
      other();
      jj_consume_token(RP);
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
  }

  final public void deleteStmt() throws ParseException {
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    qualifiedTableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      expr();
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    eventConstraint();
  }

  final public void eventConstraint() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
      jj_consume_token(ORDER);
      jj_consume_token(BY);
      orderingTerm();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[82] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        orderingTerm();
      }
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
      jj_consume_token(LIMIT);
      expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OFFSET:
      case COMMA:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OFFSET:
          jj_consume_token(OFFSET);
          break;
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expr();
        break;
      default:
        jj_la1[85] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
  }

  final public void detachStmt() throws ParseException {
    jj_consume_token(DETACH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATABASE:
      jj_consume_token(DATABASE);
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    name();
  }

  final public void dropIndexStmt() throws ParseException {
    jj_consume_token(DROP);
    jj_consume_token(INDEX);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(EXISTS);
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    if (jj_2_17(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
  }

  final public void dropTableStmt() throws ParseException {
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(EXISTS);
      break;
    default:
      jj_la1[89] = jj_gen;
      ;
    }
    if (jj_2_18(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
  }

  final public void dropTriggerStmt() throws ParseException {
    jj_consume_token(DROP);
    jj_consume_token(TRIGGER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(EXISTS);
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
    if (jj_2_19(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
  }

  final public void dropViewStmt() throws ParseException {
    jj_consume_token(DROP);
    jj_consume_token(VIEW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(EXISTS);
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
    if (jj_2_20(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
  }

// Expression is built by parts recursively to ensure operator precedences are
// to avoid left recursion.
  final public void expr() throws ParseException {
    andExpr();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[92] = jj_gen;
        break label_15;
      }
      jj_consume_token(OR);
      andExpr();
    }
  }

  final public void andExpr() throws ParseException {
    notExpr();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_16;
      }
      jj_consume_token(AND);
      notExpr();
    }
  }

  final public void notExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      notExpr();
      break;
    case CASE:
    case CAST:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case EXISTS:
    case NULL:
    case RAISE:
    case PLUS:
    case MINUS:
    case BIT_NOT:
    case NUMERIC:
    case STRING:
    case BLOB:
    case PARAMETER:
    case ID:
    case LP:
      equalityExpr();
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void equalityExpr() throws ParseException {
    relationalExpr();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BETWEEN:
      case GLOB:
      case IN:
      case IS:
      case ISNULL:
      case LIKE:
      case MATCH:
      case NOT:
      case NOTNULL:
      case REGEXP:
      case EQUAL_1:
      case EQUAL_2:
      case NOT_EQUAL_1:
      case NOT_EQUAL_2:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_17;
      }
      if (jj_2_21(2)) {
        unaryEqualityExpr();
      } else if (jj_2_22(2)) {
        betweenExpr();
      } else if (jj_2_23(2)) {
        inExpr();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GLOB:
        case IS:
        case LIKE:
        case MATCH:
        case NOT:
        case REGEXP:
        case EQUAL_1:
        case EQUAL_2:
        case NOT_EQUAL_1:
        case NOT_EQUAL_2:
          binaryEqualityExpr();
          break;
        default:
          jj_la1[96] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void unaryEqualityExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ISNULL:
      jj_consume_token(ISNULL);
      break;
    case NOTNULL:
      jj_consume_token(NOTNULL);
      break;
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(NULL);
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void binaryEqualityExpr() throws ParseException {
    binaryEqualityOperator();
    relationalExpr();
  }

  final public void binaryEqualityOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL_1:
      jj_consume_token(EQUAL_1);
      break;
    case EQUAL_2:
      jj_consume_token(EQUAL_2);
      break;
    case NOT_EQUAL_1:
      jj_consume_token(NOT_EQUAL_1);
      break;
    case NOT_EQUAL_2:
      jj_consume_token(NOT_EQUAL_2);
      break;
    case IS:
      jj_consume_token(IS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      break;
    case NOT:
      jj_consume_token(NOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIKE:
        jj_consume_token(LIKE);
        break;
      case GLOB:
        jj_consume_token(GLOB);
        break;
      case REGEXP:
        jj_consume_token(REGEXP);
        break;
      case MATCH:
        jj_consume_token(MATCH);
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LIKE:
      jj_consume_token(LIKE);
      break;
    case GLOB:
      jj_consume_token(GLOB);
      break;
    case REGEXP:
      jj_consume_token(REGEXP);
      break;
    case MATCH:
      jj_consume_token(MATCH);
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void betweenExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(BETWEEN);
      break;
    case BETWEEN:
      jj_consume_token(BETWEEN);
      break;
    default:
      jj_la1[101] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    relationalExpr();
    jj_consume_token(AND);
    relationalExpr();
  }

  final public void inExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(IN);
      break;
    case IN:
      jj_consume_token(IN);
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        inSelectExpr();
        break;
      default:
        jj_la1[103] = jj_gen;
        inSetExpr();
      }
      jj_consume_token(RP);
      break;
    case STRING:
    case ID:
      inTableExpr();
      break;
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void inSelectExpr() throws ParseException {
    selectStmt();
  }

  final public void inSetExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
    case CAST:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case EXISTS:
    case NOT:
    case NULL:
    case RAISE:
    case PLUS:
    case MINUS:
    case BIT_NOT:
    case NUMERIC:
    case STRING:
    case BLOB:
    case PARAMETER:
    case ID:
    case LP:
      expr();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[105] = jj_gen;
          break label_18;
        }
        jj_consume_token(COMMA);
        expr();
      }
      break;
    default:
      jj_la1[106] = jj_gen;
      ;
    }
  }

  final public void inTableExpr() throws ParseException {
    if (jj_2_24(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
  }

  final public void relationalExpr() throws ParseException {
    escapeExpr();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
      case LESS_OR_EQUAL:
      case GREATER:
      case GREATER_OR_EQUAL:
        ;
        break;
      default:
        jj_la1[107] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        jj_consume_token(LESS);
        break;
      case LESS_OR_EQUAL:
        jj_consume_token(LESS_OR_EQUAL);
        break;
      case GREATER:
        jj_consume_token(GREATER);
        break;
      case GREATER_OR_EQUAL:
        jj_consume_token(GREATER_OR_EQUAL);
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      escapeExpr();
    }
  }

  final public void escapeExpr() throws ParseException {
    bitwiseExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESCAPE:
      jj_consume_token(ESCAPE);
      bitwiseExpr();
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
  }

  final public void bitwiseExpr() throws ParseException {
    additiveExpr();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHIFT_HIGH:
      case SHIFT_LOW:
      case BIT_AND:
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[110] = jj_gen;
        break label_20;
      }
      bitwiseOperator();
      additiveExpr();
    }
  }

  final public void bitwiseOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHIFT_LOW:
      jj_consume_token(SHIFT_LOW);
      break;
    case SHIFT_HIGH:
      jj_consume_token(SHIFT_HIGH);
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
      break;
    default:
      jj_la1[111] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void additiveExpr() throws ParseException {
    multiplicativeExpr();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[112] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      multiplicativeExpr();
    }
  }

  final public void multiplicativeExpr() throws ParseException {
    concatenateExpr();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case MODULO:
        ;
        break;
      default:
        jj_la1[114] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case MODULO:
        jj_consume_token(MODULO);
        break;
      default:
        jj_la1[115] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      concatenateExpr();
    }
  }

  final public void concatenateExpr() throws ParseException {
    collateExpr();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCATENATION:
        ;
        break;
      default:
        jj_la1[116] = jj_gen;
        break label_23;
      }
      jj_consume_token(CONCATENATION);
      collateExpr();
    }
  }

  final public void collateExpr() throws ParseException {
    unaryExpr();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLLATE:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_24;
      }
      jj_consume_token(COLLATE);
      name();
    }
  }

  final public void unaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case BIT_NOT:
      unaryOperator();
      unaryExpr();
      break;
    case CASE:
    case CAST:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case EXISTS:
    case NULL:
    case RAISE:
    case NUMERIC:
    case STRING:
    case BLOB:
    case PARAMETER:
    case ID:
    case LP:
      terminalExpr();
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void unaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case BIT_NOT:
      jj_consume_token(BIT_NOT);
      break;
    default:
      jj_la1[119] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void terminalExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAMETER:
      bindParameterExpr();
      break;
    default:
      jj_la1[120] = jj_gen;
      if (jj_2_25(2)) {
        functionExpr();
      } else if (jj_2_26(2)) {
        columnExpr();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CURRENT_DATE:
        case CURRENT_TIME:
        case CURRENT_TIMESTAMP:
        case NULL:
        case NUMERIC:
        case STRING:
        case BLOB:
          literalExpr();
          break;
        case CAST:
          castExpr();
          break;
        case EXISTS:
          existsExpr();
          break;
        default:
          jj_la1[121] = jj_gen;
          if (jj_2_27(2)) {
            jj_consume_token(LP);
            expr();
            jj_consume_token(RP);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LP:
              selectExpr();
              break;
            case CASE:
              caseExpr();
              break;
            case RAISE:
              raiseFunctionExpr();
              break;
            default:
              jj_la1[122] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void literalExpr() throws ParseException {
    literalValue();
  }

  final public void bindParameterExpr() throws ParseException {
    jj_consume_token(PARAMETER);
  }

  final public void functionExpr() throws ParseException {
    name();
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
    case CAST:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case DISTINCT:
    case EXISTS:
    case NOT:
    case NULL:
    case RAISE:
    case STAR:
    case PLUS:
    case MINUS:
    case BIT_NOT:
    case NUMERIC:
    case STRING:
    case BLOB:
    case PARAMETER:
    case ID:
    case LP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case CASE:
      case CAST:
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case DISTINCT:
      case EXISTS:
      case NOT:
      case NULL:
      case RAISE:
      case PLUS:
      case MINUS:
      case BIT_NOT:
      case NUMERIC:
      case STRING:
      case BLOB:
      case PARAMETER:
      case ID:
      case LP:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DISTINCT:
          jj_consume_token(DISTINCT);
          break;
        default:
          jj_la1[123] = jj_gen;
          ;
        }
        expr();
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[124] = jj_gen;
            break label_25;
          }
          jj_consume_token(COMMA);
          expr();
        }
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[126] = jj_gen;
      ;
    }
    jj_consume_token(RP);
  }

  final public void columnExpr() throws ParseException {
    if (jj_2_29(2)) {
      if (jj_2_28(4)) {
        name();
        jj_consume_token(DOT);
      } else {
        ;
      }
      name();
      jj_consume_token(DOT);
      name();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        break;
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void castExpr() throws ParseException {
    jj_consume_token(CAST);
    jj_consume_token(LP);
    expr();
    jj_consume_token(AS);
    typeName();
    jj_consume_token(RP);
  }

  final public void existsExpr() throws ParseException {
    jj_consume_token(EXISTS);
    selectExpr();
  }

  final public void selectExpr() throws ParseException {
    jj_consume_token(LP);
    selectStmt();
    jj_consume_token(RP);
  }

  final public void caseExpr() throws ParseException {
    jj_consume_token(CASE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
    case CAST:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case EXISTS:
    case NOT:
    case NULL:
    case RAISE:
    case PLUS:
    case MINUS:
    case BIT_NOT:
    case NUMERIC:
    case STRING:
    case BLOB:
    case PARAMETER:
    case ID:
    case LP:
      expr();
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
    label_26:
    while (true) {
      whenExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        ;
        break;
      default:
        jj_la1[129] = jj_gen;
        break label_26;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      expr();
      break;
    default:
      jj_la1[130] = jj_gen;
      ;
    }
    jj_consume_token(END);
  }

  final public void whenExpr() throws ParseException {
    jj_consume_token(WHEN);
    expr();
    jj_consume_token(THEN);
    expr();
  }

  final public void raiseFunctionExpr() throws ParseException {
    jj_consume_token(RAISE);
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGNORE:
      jj_consume_token(IGNORE);
      break;
    case ABORT:
    case FAIL:
    case ROLLBACK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROLLBACK:
        jj_consume_token(ROLLBACK);
        break;
      case ABORT:
        jj_consume_token(ABORT);
        break;
      case FAIL:
        jj_consume_token(FAIL);
        break;
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      default:
        jj_la1[132] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[133] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RP);
  }

  final public void literalValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERIC:
      numericLiteral();
      break;
    case STRING:
      stringLiteral();
      break;
    case BLOB:
      blobLiteral();
      break;
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case NULL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
        jj_consume_token(NULL);
        break;
      case CURRENT_TIME:
        jj_consume_token(CURRENT_TIME);
        break;
      case CURRENT_DATE:
        jj_consume_token(CURRENT_DATE);
        break;
      case CURRENT_TIMESTAMP:
        jj_consume_token(CURRENT_TIMESTAMP);
        break;
      default:
        jj_la1[134] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[135] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void numericLiteral() throws ParseException {
    jj_consume_token(NUMERIC);
  }

  final public void stringLiteral() throws ParseException {
    jj_consume_token(STRING);
  }

  final public void blobLiteral() throws ParseException {
    jj_consume_token(BLOB);
  }

  final public void insertStmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSERT:
      jj_consume_token(INSERT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ROLLBACK:
          jj_consume_token(ROLLBACK);
          break;
        case ABORT:
          jj_consume_token(ABORT);
          break;
        case REPLACE:
          jj_consume_token(REPLACE);
          break;
        case FAIL:
          jj_consume_token(FAIL);
          break;
        case IGNORE:
          jj_consume_token(IGNORE);
          break;
        default:
          jj_la1[136] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[137] = jj_gen;
        ;
      }
      break;
    case REPLACE:
      jj_consume_token(REPLACE);
      break;
    default:
      jj_la1[138] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(INTO);
    if (jj_2_30(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULT_:
      jj_consume_token(DEFAULT_);
      jj_consume_token(VALUES);
      break;
    case SELECT:
    case VALUES:
    case LP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LP:
        jj_consume_token(LP);
        name();
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[139] = jj_gen;
            break label_27;
          }
          jj_consume_token(COMMA);
          name();
        }
        jj_consume_token(RP);
        break;
      default:
        jj_la1[140] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUES:
        insertStmtWithValues();
        break;
      case SELECT:
        insertStmtWithSelect();
        break;
      default:
        jj_la1[141] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[142] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void insertStmtWithValues() throws ParseException {
    jj_consume_token(VALUES);
    jj_consume_token(LP);
    expr();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[143] = jj_gen;
        break label_28;
      }
      jj_consume_token(COMMA);
      expr();
    }
    jj_consume_token(RP);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[144] = jj_gen;
        break label_29;
      }
      jj_consume_token(COMMA);
      jj_consume_token(LP);
      expr();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[145] = jj_gen;
          break label_30;
        }
        jj_consume_token(COMMA);
        expr();
      }
      jj_consume_token(RP);
    }
  }

  final public void insertStmtWithSelect() throws ParseException {
    selectStmt();
  }

  final public void pragmaStmt() throws ParseException {
    jj_consume_token(PRAGMA);
    if (jj_2_31(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL_1:
    case LP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_1:
        jj_consume_token(EQUAL_1);
        pragmaValue();
        break;
      case LP:
        jj_consume_token(LP);
        pragmaValue();
        jj_consume_token(RP);
        break;
      default:
        jj_la1[146] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[147] = jj_gen;
      ;
    }
  }

  final public void pragmaValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case NUMERIC:
      signedNumber();
      break;
    default:
      jj_la1[148] = jj_gen;
      if (jj_2_32(2147483647)) {
        stringLiteral();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
        case ID:
          name();
          break;
        default:
          jj_la1[149] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void reindexStmt() throws ParseException {
    jj_consume_token(REINDEX);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ID:
      name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        name();
        break;
      default:
        jj_la1[150] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[151] = jj_gen;
      ;
    }
  }

  final public void selectStmt() throws ParseException {
    selectCore();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXCEPT:
      case INTERSECT:
      case UNION:
        ;
        break;
      default:
        jj_la1[152] = jj_gen;
        break label_31;
      }
      compoundOperator();
      selectCore();
    }
    eventConstraint();
  }

  final public void selectCore() throws ParseException {
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
    case DISTINCT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        jj_consume_token(DISTINCT);
        break;
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[153] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[154] = jj_gen;
      ;
    }
    resultColumn();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[155] = jj_gen;
        break label_32;
      }
      jj_consume_token(COMMA);
      resultColumn();
    }
    jj_consume_token(FROM);
    joinSource();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      expr();
      break;
    default:
      jj_la1[156] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP:
      jj_consume_token(GROUP);
      jj_consume_token(BY);
      expr();
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[157] = jj_gen;
          break label_33;
        }
        jj_consume_token(COMMA);
        expr();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HAVING:
        jj_consume_token(HAVING);
        expr();
        break;
      default:
        jj_la1[158] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[159] = jj_gen;
      ;
    }
  }

  final public void resultColumn() throws ParseException {
    if (jj_2_33(3)) {
      universalColumn();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case CAST:
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case EXISTS:
      case NOT:
      case NULL:
      case RAISE:
      case PLUS:
      case MINUS:
      case BIT_NOT:
      case NUMERIC:
      case STRING:
      case BLOB:
      case PARAMETER:
      case ID:
      case LP:
        expressionColumn();
        break;
      default:
        jj_la1[160] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void universalColumn() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
      break;
    case STRING:
    case ID:
      name();
      jj_consume_token(DOT);
      jj_consume_token(STAR);
      break;
    default:
      jj_la1[161] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void expressionColumn() throws ParseException {
    expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case STRING:
    case ID:
      aliasedColumn();
      break;
    default:
      jj_la1[162] = jj_gen;
      ;
    }
  }

  final public void aliasedColumn() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      break;
    default:
      jj_la1[163] = jj_gen;
      ;
    }
    name();
  }

  final public void joinSource() throws ParseException {
    singleSource();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CROSS:
      case INNER:
      case JOIN:
      case LEFT:
      case NATURAL:
      case COMMA:
        ;
        break;
      default:
        jj_la1[164] = jj_gen;
        break label_34;
      }
      joinOp();
      singleSource();
      joinConstraint();
    }
  }

  final public void singleSource() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case ID:
      tableSource();
      break;
    default:
      jj_la1[165] = jj_gen;
      if (jj_2_34(2)) {
        selectSource();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LP:
          jj_consume_token(LP);
          joinSource();
          jj_consume_token(RP);
          break;
        default:
          jj_la1[166] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void tableSource() throws ParseException {
    if (jj_2_35(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case STRING:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[167] = jj_gen;
        ;
      }
      name();
      break;
    default:
      jj_la1[168] = jj_gen;
      ;
    }
    indexedBy();
  }

  final public void selectSource() throws ParseException {
    jj_consume_token(LP);
    selectStmt();
    jj_consume_token(RP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case STRING:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[169] = jj_gen;
        ;
      }
      name();
      break;
    default:
      jj_la1[170] = jj_gen;
      ;
    }
  }

  final public void joinOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    case NATURAL:
      jj_consume_token(NATURAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT:
        jj_consume_token(LEFT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUTER:
          jj_consume_token(OUTER);
          jj_consume_token(JOIN);
          break;
        case JOIN:
          jj_consume_token(JOIN);
          break;
        default:
          jj_la1[171] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case INNER:
        jj_consume_token(INNER);
        jj_consume_token(JOIN);
        break;
      case CROSS:
        jj_consume_token(CROSS);
        jj_consume_token(JOIN);
        break;
      case JOIN:
        jj_consume_token(JOIN);
        break;
      default:
        jj_la1[172] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LEFT:
      jj_consume_token(LEFT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTER:
        jj_consume_token(OUTER);
        jj_consume_token(JOIN);
        break;
      case JOIN:
        jj_consume_token(JOIN);
        break;
      default:
        jj_la1[173] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case INNER:
      jj_consume_token(INNER);
      jj_consume_token(JOIN);
      break;
    case CROSS:
      jj_consume_token(CROSS);
      jj_consume_token(JOIN);
      break;
    case JOIN:
      jj_consume_token(JOIN);
      break;
    default:
      jj_la1[174] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void joinConstraint() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ON:
    case USING:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ON:
        joinConstraintOn();
        break;
      case USING:
        joinConstraintUsing();
        break;
      default:
        jj_la1[175] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[176] = jj_gen;
      ;
    }
  }

  final public void joinConstraintOn() throws ParseException {
    jj_consume_token(ON);
    expr();
  }

  final public void joinConstraintUsing() throws ParseException {
    jj_consume_token(USING);
    jj_consume_token(LP);
    name();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[177] = jj_gen;
        break label_35;
      }
      jj_consume_token(COMMA);
      name();
    }
    jj_consume_token(RP);
  }

  final public void orderingTerm() throws ParseException {
    expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        jj_consume_token(ASC);
        break;
      case DESC:
        jj_consume_token(DESC);
        break;
      default:
        jj_la1[178] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[179] = jj_gen;
      ;
    }
  }

  final public void compoundOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNION:
      jj_consume_token(UNION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[180] = jj_gen;
        ;
      }
      break;
    case INTERSECT:
      jj_consume_token(INTERSECT);
      break;
    case EXCEPT:
      jj_consume_token(EXCEPT);
      break;
    default:
      jj_la1[181] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void indexedBy() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INDEXED:
    case NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDEXED:
        jj_consume_token(INDEXED);
        jj_consume_token(BY);
        name();
        break;
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(INDEXED);
        break;
      default:
        jj_la1[182] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[183] = jj_gen;
      ;
    }
  }

  final public void updateStmt() throws ParseException {
    jj_consume_token(UPDATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROLLBACK:
        jj_consume_token(ROLLBACK);
        break;
      case ABORT:
        jj_consume_token(ABORT);
        break;
      case REPLACE:
        jj_consume_token(REPLACE);
        break;
      case FAIL:
        jj_consume_token(FAIL);
        break;
      case IGNORE:
        jj_consume_token(IGNORE);
        break;
      default:
        jj_la1[184] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[185] = jj_gen;
      ;
    }
    qualifiedTableName();
    jj_consume_token(SET);
    columnAssignment();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[186] = jj_gen;
        break label_36;
      }
      jj_consume_token(COMMA);
      columnAssignment();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      expr();
      break;
    default:
      jj_la1[187] = jj_gen;
      ;
    }
    eventConstraint();
  }

  final public void qualifiedTableName() throws ParseException {
    if (jj_2_36(2)) {
      name();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name();
    indexedBy();
  }

  final public void columnAssignment() throws ParseException {
    name();
    jj_consume_token(EQUAL_1);
    expr();
  }

  final public void vacuumStmt() throws ParseException {
    jj_consume_token(VACUUM);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_3_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) return true;
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(BETWEEN)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) return true;
    }
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_scan_token(VIEW)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(RAISE)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) jj_scanpos = xsp;
    if (jj_scan_token(INDEX)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) return true;
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(TRIGGER)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    if (jj_scan_token(TRIGGER)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(CAST)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(INITIALLY)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(INDEX)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(DEFERRABLE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserSQLTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[188];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x1218000,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000,0x80000,0x0,0x0,0x0,0x40000,0x0,0x0,0xc0000000,0x0,0x0,0x0,0x0,0xc0000000,0x80000,0x80000,0x400000,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x802000,0x802000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x30000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x30000000,0x0,0x0,0x20000000,0x10000000,0x0,0x0,0x30000000,0x30000000,0x0,0x30000000,0x0,0x0,0x400,0x0,0x400,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x0,0x0,0x0,0x0,0x30000000,0x0,0x40000,0x40000,0x0,0x0,0x0,0x40000,0x40000,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0x4000,0x0,0x0,0x0,0x400,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2000000,0x100002,0xa010,0x20000,0x0,0x0,0x1,0x0,0x0,0x200,0x801000,0x801000,0x0,0x100002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x408,0x0,0x0,0x0,0x8,0x400,0x4000,0x4000,0x0,0x1c0,0x0,0x0,0x8,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x400,0x0,0x800,0x1000,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x8000000,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x10001c0,0x80000000,0x80000000,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x10001c0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10001c0,0x0,0x0,0x10001c0,0x0,0x10000,0x0,0x10101c0,0x10101c0,0x0,0x10001c0,0x0,0x80000,0x4000000,0x0,0x4000000,0x1c0,0x1c0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x10001c0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x20,0x0,0x0,0x0,0x4000,0x4000,0x0,0x400000,0x0,0x0,0x4000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20200000,0x20200000,0x0,0x4000000,0x800000,0x1000000,0x10,0x100,0x8,0x20000000,0x0,0x0,0x4,0x800,0x800,0x0,0x8000000,0x400,0x0,0x0,0x400,0x400,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x10000000,0x10000000,0x100000,0x0,0x4,0x4,0x4,0x4,0x40000000,0x0,0x5000000,0x328c020,0x1284000,0x3008000,0x1000000,0x280000,0x1284000,0x1000000,0x1000020,0x0,0x0,0x0,0x5000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x5000000,0x5000000,0x0,0x5000000,0x0,0x0,0x0,0x0,0x8,0x4000000,0x4000000,0x8,0x40000000,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x2,0x1,0x5000000,0x0,0x0,0x0,0x450200,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x50200,0x10000,0x450200,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x1000,0x1000080,0x1000080,0x8,0x40000000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x10,0x0,0x0,0x0,0x50034b04,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x1000000,0x1000000,0x10000,0x800000,0x10000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x300000,0x300000,0x0,0x0,0x0,0x0,0x8000048,0x0,0x0,0x0,0x0,0x8000048,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x41000,0x0,0x0,0x0,0x4800,0x0,0x300000,0x300000,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x10020800,0x10020800,0x300000,0x300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x80,0x80,0x0,0x0,0x80,0x80,0x0,0x0,0x20000,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x20,0x0,0x0,0x20,0x20,0x0,0x20,0x0,0x0,0x4000,0x0,0x4000,0x0,0x0,0x4800,0x0,0x800,0x0,0x0,0x80020000,0x80020000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x4800,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x12000000,0x0,0x0,0x0,0x12000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x12000000,0x0,0x12000000,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x26800000,0x300,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x20000000,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e804300,0x780000,0x780000,0x0,0x0,0x0,0x780000,0x0,0x0,0x0,0x32000000,0x0,0x3e804300,0x78000,0x78000,0x0,0x3c00,0x3c00,0x300,0x300,0xe0,0xe0,0x10,0x0,0x3e804300,0x4300,0x8000000,0x6800000,0x20000000,0x0,0x0,0x3e804320,0x3e804320,0x10000000,0x3e804300,0x4,0x0,0x0,0x12000000,0x0,0x0,0x6800000,0x0,0x0,0x0,0x0,0x20000000,0x0,0x20000000,0x0,0x0,0x0,0x20080000,0x20080000,0x800300,0x12000000,0x0,0x12000000,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x3e804300,0x12000020,0x12000000,0x0,0x0,0x12000000,0x20000000,0x0,0x12000000,0x0,0x12000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[36];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserSQL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserSQL(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserSQLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 188; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 188; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserSQL(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserSQLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 188; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 188; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserSQL(ParserSQLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 188; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserSQLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 188; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      System.out.print (" <->  "+ ParserSQLConstants.tokenImage[kind]);
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[165];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 188; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 165; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 36; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
