/* Generated By:JavaCC: Do not edit this line. ParserSQLTokenManager.java */
package apprendreSQL.Model.analysisType.lexical;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.List;

import apprendreSQL.Model.analysisType.syntax.ParserSQLConstants;

import java.util.ArrayList;

/** Token Manager. */
public class ParserSQLTokenManager implements ParserSQLConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x200L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x200L) != 0L)
            return 0;
         if ((active0 & 0xfffffffffffffc00L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xfL) != 0L)
         {
            jjmatchedKind = 156;
            return 35;
         }
         if ((active2 & 0x200000000L) != 0L)
            return 11;
         return -1;
      case 1:
         if ((active0 & 0x40c0000L) != 0L || (active1 & 0x800000fb80ffe4L) != 0L)
            return 35;
         if ((active0 & 0xfffffffffbf3fc00L) != 0L || (active1 & 0xff7fffff047f001bL) != 0L || (active2 & 0xfL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 156;
               jjmatchedPos = 1;
            }
            return 35;
         }
         return -1;
      case 2:
         if ((active0 & 0xe7effffffbe1ac00L) != 0L || (active1 & 0xff7b7fff947dbfdbL) != 0L || (active2 & 0xfL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 156;
               jjmatchedPos = 2;
            }
            return 35;
         }
         if ((active0 & 0x18100000001a5000L) != 0L || (active1 & 0x4800003020000L) != 0L)
            return 35;
         return -1;
      case 3:
         if ((active0 & 0x13e1bfffcbe1ac00L) != 0L || (active1 & 0xff0b7ffd92709fdbL) != 0L || (active2 & 0xaL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 156;
               jjmatchedPos = 3;
            }
            return 35;
         }
         if ((active0 & 0xe40e400030000000L) != 0L || (active1 & 0x700002040d2000L) != 0L || (active2 & 0x5L) != 0L)
            return 35;
         return -1;
      case 4:
         if ((active0 & 0x204100a400L) != 0L || (active1 & 0x24082031803002c1L) != 0L || (active2 & 0x8L) != 0L)
            return 35;
         if ((active0 & 0x13e1bfdf8ae10800L) != 0L || (active1 & 0xdb235fcc12409d1aL) != 0L || (active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 156;
               jjmatchedPos = 4;
            }
            return 35;
         }
         return -1;
      case 5:
         if ((active0 & 0x12811fcc8a410000L) != 0L || (active1 & 0x3215b4802401990L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 5;
            return 35;
         }
         if ((active0 & 0x160a01300a00800L) != 0L || (active1 & 0xd80204841000840aL) != 0L)
            return 35;
         return -1;
      case 6:
         if ((active0 & 0x811bcc00400000L) != 0L || (active1 & 0x121504000001110L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 6;
            return 35;
         }
         if ((active0 & 0x120004008a010000L) != 0L || (active1 & 0x2000b0802400880L) != 0L || (active2 & 0x2L) != 0L)
            return 35;
         return -1;
      case 7:
         if ((active0 & 0x1120400000000L) != 0L || (active1 & 0x500000000000L) != 0L)
            return 35;
         if ((active0 & 0x8009c800400000L) != 0L || (active1 & 0x121004000001110L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 7;
            return 35;
         }
         return -1;
      case 8:
         if ((active0 & 0x80000000000000L) != 0L || (active1 & 0x21000000001110L) != 0L)
            return 35;
         if ((active0 & 0x9c800400000L) != 0L || (active1 & 0x100004000000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 8;
            return 35;
         }
         return -1;
      case 9:
         if ((active0 & 0x1c000400000L) != 0L || (active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 9;
            return 35;
         }
         if ((active0 & 0x80800000000L) != 0L || (active1 & 0x4000000000L) != 0L)
            return 35;
         return -1;
      case 10:
         if ((active0 & 0x1c000400000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 10;
            return 35;
         }
         if ((active1 & 0x100000000000000L) != 0L)
            return 35;
         return -1;
      case 11:
         if ((active0 & 0x1c000000000L) != 0L)
            return 35;
         if ((active0 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 156;
               jjmatchedPos = 11;
            }
            return 35;
         }
         return -1;
      case 12:
         if ((active0 & 0x400000L) != 0L)
            return 35;
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 12;
            return 35;
         }
         return -1;
      case 13:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 13;
            return 35;
         }
         return -1;
      case 14:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 14;
            return 35;
         }
         return -1;
      case 15:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 15;
            return 35;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000L);
      case 37:
         return jjStopAtPos(0, 135);
      case 38:
         return jjStopAtPos(0, 140);
      case 40:
         return jjStopAtPos(0, 157);
      case 41:
         return jjStopAtPos(0, 158);
      case 42:
         return jjStopAtPos(0, 133);
      case 43:
         return jjStopAtPos(0, 136);
      case 44:
         return jjStopAtPos(0, 160);
      case 45:
         return jjStartNfaWithStates_0(0, 137, 0);
      case 46:
         return jjStartNfaWithStates_0(0, 161, 11);
      case 47:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 159);
      case 60:
         jjmatchedKind = 143;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x410400L);
      case 61:
         jjmatchedKind = 147;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L);
      case 62:
         jjmatchedKind = 145;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40800L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x6ffc00L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x7800000L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1fff8000000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3fe0000000000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3fc000000000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7c00000000000000L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfffcL, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c0000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c00000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x1f8000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe00000000L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffe000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7000000000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f8000000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c00000000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000000000000L, 0x3L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xcL);
      case 124:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10L);
      case 126:
         return jjStopAtPos(0, 142);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 60:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         break;
      case 61:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         break;
      case 62:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x404020038000000L, active1, 0xc009002000600002L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xfc0003800000L, active1, 0x361fc000060000L, active2, 0L);
      case 70:
      case 102:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 66, 35);
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0x10000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0x40000000000000L, active2, 0xcL);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0x200000180000L, active2, 0x3L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800800000010c000L, active1, 0x200000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 93, 35);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000030000L, active1, 0xc00000000003fc0L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 119, 35);
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000f80000000L, active1, 0xc00003010000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2002003000000000L, active1, 0x300000c80000001L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000080000L, active1, 0x2000000000008000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400001c000400000L, active1, 0x1104000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x3c0000000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 35);
         break;
      case 124:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x100000600000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0xe4000000000000L, active1, 0x4000000000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 35);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 35);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 35);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000800000c0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1040000000L, active1, 0x40001000000000L, active2, 0xdL);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c0000800000L, active1, 0x4010040000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0x208000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x500000000000000L, active1, 0x2e00012800010100L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000200180000000L, active1, 0x8002420004000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x30000000100010L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000L, active1, 0x40000008208L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xa002002000000400L, active1, 0x1L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x80000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100001c000000000L, active1, 0L, active2, 0x2L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x9400038000000L, active1, 0x100000000c00L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 114, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0x82000260a800L, active1, 0x102603000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000002L, active2, 0L);
      case 87:
      case 119:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 111, 35);
         break;
      case 89:
      case 121:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20861000200000L, active1, 0x1000040000000000L, active2, 0L);
      case 66:
      case 98:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 35);
         break;
      case 67:
      case 99:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x48000000L, active1, 0x200000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 35);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 35);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x104038000000a000L, active1, 0x302c1800016d0L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000400000000L, active2, 0L);
      case 72:
      case 104:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000800L, active1, 0x100002L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 35);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 35);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x280000080010000L, active1, 0x8480000000000L, active2, 0L);
      case 77:
      case 109:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0x800000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 35);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 35);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 35);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 130, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2100010002000000L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000L, active1, 0x400000000000008L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 35);
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c000000400L, active1, 0x1000000000L, active2, 0x8L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100002800000000L, active1, 0x2010000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 35);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x100000000900L, active2, 0x2L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0xc000000000408001L, active2, 0L);
      case 87:
      case 119:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 128, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000088000000L, active1, 0xa0800000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0x400000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000200000L, active1, 0x2000000000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000010L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 35);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 35);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 131, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x1c002000000L, active1, 0x8000000010000800L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 35);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1001000200400000L, active1, 0x100L, active2, 0L);
      case 75:
      case 107:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 35);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x8000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0x40400000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 35);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 122, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0x20000000000000L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x60000000000000L, active1, 0x1000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 35);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 35);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 35);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 35);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x180000800000L, active1, 0x104000401408L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 35);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 35);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 109, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x100201800000000L, active1, 0x1000000000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80040000000000L, active1, 0x4800000002000000L, active2, 0x2L);
      case 88:
      case 120:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000080L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0x100400000400900L, active2, 0x2L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 35);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 35);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 35);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 35);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 35);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 35);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 124, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0x200014000000080L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 35);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 35);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000400000000L, active1, 0x100000000010L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0x2000000L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 126, 35);
         break;
      case 78:
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 35);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x101c000400000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 35);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x180800000000L, active1, 0x20000800000000L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 35);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 127, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x20000001000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 35);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 35);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 35);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 35);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L, active2, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x80800000000L, active1, 0x20000000000010L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000400400000L, active1, 0x100500000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 35);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 75, 35);
         break;
      case 69:
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 35);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 35);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 35);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 105, 35);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 107, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0x1000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0x1000000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 35);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 35);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 129, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 35);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 35);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 121, 35);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x1c000000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 104, 35);
         break;
      case 89:
      case 121:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 99, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x1c000000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000001000L);
      case 68:
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 35);
         break;
      case 69:
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 35);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L);
      case 75:
      case 107:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 110, 35);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0x20000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 35);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 35);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 108, 35);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000010L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 55, 35);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 68, 35);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0x4000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 76, 35);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 112, 35);
         return jjMoveStringLiteralDfa9_0(active0, 0x18000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 72, 35);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 117, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 35);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x18000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000000000L);
      case 83:
      case 115:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 102, 35);
         break;
      case 84:
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x18000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 120, 35);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 38, 35);
         else if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(12, 22, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 40, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 51;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 151)
                        kind = 151;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x400001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 27);
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 39)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 46)
                     jjCheckNAdd(11);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  else if (curChar == 63)
                  {
                     if (kind > 155)
                        kind = 155;
                     jjCheckNAdd(24);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 156)
                        kind = 156;
                     jjCheckNAdd(35);
                  }
                  break;
               case 0:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAddStates(0, 2);
                  break;
               case 5:
                  if (curChar != 46)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAddTwoStates(11, 7);
                  break;
               case 12:
                  if (curChar == 39)
                     jjCheckNAddStates(6, 8);
                  break;
               case 13:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 14:
                  if (curChar == 39)
                     jjCheckNAddStates(9, 11);
                  break;
               case 15:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 17:
                  if (curChar == 39 && kind > 153)
                     kind = 153;
                  break;
               case 18:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(19, 21);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 21);
                  break;
               case 21:
                  if (curChar == 39 && kind > 154)
                     kind = 154;
                  break;
               case 23:
                  if (curChar != 63)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x400001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 27);
                  break;
               case 26:
                  if (curChar == 58)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if (curChar != 36)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAddStates(12, 14);
                  break;
               case 28:
                  if (curChar != 58)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAddStates(12, 14);
                  break;
               case 29:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 31:
                  if ((0xfffffdfeffffc9ffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar == 41 && kind > 155)
                     kind = 155;
                  break;
               case 33:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 34:
                  if (curChar != 36)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  break;
               case 37:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 38:
                  if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  break;
               case 39:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 41:
                  if (curChar == 34 && kind > 156)
                     kind = 156;
                  break;
               case 43:
                  jjCheckNAddStates(18, 20);
                  break;
               case 46:
                  jjCheckNAddStates(21, 23);
                  break;
               case 49:
                  jjAddStates(24, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 156)
                        kind = 156;
                     jjCheckNAdd(35);
                  }
                  else if (curChar == 91)
                     jjCheckNAddTwoStates(49, 50);
                  else if (curChar == 96)
                     jjCheckNAddStates(18, 20);
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(33, 27);
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 1:
                  jjAddStates(26, 27);
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 13:
                  jjCheckNAddStates(6, 8);
                  break;
               case 16:
                  jjCheckNAddStates(9, 11);
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 22:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 25:
                  if (curChar == 64)
                     jjCheckNAddTwoStates(33, 27);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjCheckNAddStates(12, 14);
                  break;
               case 31:
                  jjAddStates(32, 33);
                  break;
               case 34:
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjCheckNAdd(35);
                  break;
               case 37:
                  jjCheckNAddStates(3, 5);
                  break;
               case 40:
                  jjCheckNAddStates(15, 17);
                  break;
               case 42:
                  if (curChar == 96)
                     jjCheckNAddStates(18, 20);
                  break;
               case 43:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 44:
                  if (curChar == 96)
                     jjCheckNAddStates(21, 23);
                  break;
               case 45:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 47:
                  if (curChar == 96 && kind > 156)
                     kind = 156;
                  break;
               case 48:
                  if (curChar == 91)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 49:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 50:
                  if (curChar == 93 && kind > 156)
                     kind = 156;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(26, 27);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(6, 8);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(9, 11);
                  break;
               case 31:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(32, 33);
                  break;
               case 37:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  break;
               case 40:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(15, 17);
                  break;
               case 43:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(18, 20);
                  break;
               case 46:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(21, 23);
                  break;
               case 49:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(24, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 51 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   4, 5, 7, 37, 39, 41, 13, 15, 17, 15, 16, 17, 27, 29, 30, 39, 
   40, 41, 43, 45, 47, 45, 46, 47, 49, 50, 1, 2, 8, 9, 19, 21, 
   31, 32, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\174\174", "\52", "\57", "\45", "\53", 
"\55", "\74\74", "\76\76", "\46", "\174", "\176", "\74", "\74\75", "\76", "\76\75", 
"\75", "\75\75", "\41\75", "\74\76", null, null, null, null, null, null, "\50", 
"\51", "\73", "\54", "\56", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_BLOCK_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffc01L, 0xffffffffffffffffL, 0x3feffffffL, 
};
static final long[] jjtoSkip = {
   0x27eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x240L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x180L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[51];
private final int[] jjstateSet = new int[102];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParserSQLTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserSQLTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 51; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
